//single stack, tsto rockets without a fairing.
//uses semi advanced roll program.
//uses semi-advanced gravity turn - vel/apo based

parameter Direction.
parameter TargetAlt.

clearscreen.
lock throttle to 1.
lock steering to heading (0,90).


//countdown
run countfrom(5).
print "blastoff!!".
stage.

//autostager
when ship:maxthrust = 0 then{
 print "staging!".
 stage.
 wait 1.
 preserve.
}

//activate abort system here. this could be a parameter i guess.
//when ship:altitude >= 30000 then {
// print "losing safety system".
// stage.
// wait 1.
//}

//Roll Program
wait until ship:velocity:surface:mag > 40.
print "starting roll program".
lock steering to heading((Direction / 2),90).
wait (Direction/180).
lock steering to heading(Direction,90).
wait 1.
lock steering to heading(Direction,90).

wait until ship:velocity:surface:mag >= 90.


//Ascent 1
//runs until pitch is 50
//turns 1 degree for every +7 m/s starting at 100 m/s and ending around 300 m/s
print "starting gravity turn".
wait 1.
declare Pitch to 89.
declare AscVel to 100.

until Pitch <= 50{ 
 until ship:velocity:surface:mag >= AscVel{
  clearscreen.
  print "Velocity: " + round(ship:velocity:surface:mag).
  print "target velocity: " + AscVel.  
  print "pitch: " + Pitch.
  print "altitude: " + round(ship:altitude).
  print "apo: " + round(ship:apoapsis).
  wait .1.
 }

 //increment by  
 lock steering to heading(Direction,Pitch).
 set Pitch to (Pitch - 1).
 Set AscVel to (AscVel + 7).
 
}

//velocity at end of ascent1:
print "Velocity: " + round(ship:velocity:surface:mag).
print "altitude: " + round(ship:altitude).
wait 1.

//Ascent 2
//runs until your pitch is 10 or your apo is above 60k
//pitches over 1deg for every 1k increase in apospsis.
print "continuing gravity turn".
set Pitch to (Pitch - 1).
declare AscApo to 20000.

until Pitch <= 10 or ship:apoapsis >= 60000{ 
 until ship:apoapsis >= AscApo{
  clearscreen.
  print "apo: " + round(ship:apoapsis).
  print "target apo: " + AscApo.
  print "pitch: " + Pitch.
  wait .1.
  
 } 
 lock steering to heading (Direction,Pitch).
 set Pitch to (Pitch - 1).
 set AscApo to (AscApo + 1000).

}

//clear atmo
//pitch is still 10 at this point???

until ship:apoapsis >= 70000{ 
 clearscreen.
 print "burning for space".
 print "apo: " + round(ship:apoapsis).
 print "target apo: " + TargetAlt.
 wait .1.

}

clearscreen.
print "apo in space".
wait 1.

//Reach TargetAlt
until ship:apoapsis >= TargetAlt{
 clearscreen.
 print "apo: " + round(ship:apoapsis).
 print "target apo: 70000".
 wait .1.

}

lock throttle to 0.
lock steering to prograde.

//good candidate for the basis of a shipstats script
clearscreen.
print "apo: " + round(ship:apoapsis).
print "tApo: " + TargetAlt.
print "apo at destination, throttle off".
wait 1.
print "-".
wait 1.
print "final apo: " + round(ship:apoapsis).
print "target alt: " + TargetAlt.
wait 5.

until ship:altitude >= 71000{
 clearscreen.
 print "alt: " + round(ship:altitude).
 print "waiting to clear atmosphere".
 wait .1.
}

//circularize

//run CircAtApo(Direction).- this was renamed
run Circularize(Direction).

//eccentricity
run eccentricity.

//make ship state scrip tthat lists fuel, batt, etc.
//run shipstats.
print "Fuel Remaining: " + round(stage:liquidfuel).

print "goodbye".


