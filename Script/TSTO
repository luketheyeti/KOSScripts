//2 stage single stick and a fairing launch script.
//now with optional fairings! if > 0 then fairings!
//semi advanced roll control
//no throttle control
//semi advanced gravity turn, vel/apo based
//uses circ
//has minimum targetalt
//has to set pitch to 3

parameter Direction.
parameter TargetAlt.
parameter Fairings.

Set TargetAlt to Max(72000,TargetAlt).

function Msg {
 parameter mText.
 
 hudtext(mText,4,2,25,green,false).
 
}


function Log {
 //Write stuff to log
 Log "test" to log.txt.
 //Declare data to pitch + ", " + (ship:velocity:surface:mag)
//Log data to log.txt
//First write headers
//Then write values
//Make sure you get the values of the vars
 
}

Msg("test").


clearscreen.
lock throttle to 1.
lock steering to heading (0,90).


//countdown

run countfrom(5).

print "blastoff!!".
stage.
wait 3.
clearscreen.

//autostager
when ship:maxthrust < 1 then {
 Msg("Staging!").
 wait .5.
 stage.
 preserve.
}

//fairings!!!
if Fairings > 0{
 when ship:altitude >= 45000 then {
  Msg("Losing Fairings!").
  stage.
  wait 1.
 }
}

//Roll Program
wait until ship:velocity:surface:mag > 40.
Msg("starting roll program").
lock steering to heading((Direction / 2),90).
wait (Direction/180).
lock steering to heading(Direction,90).
wait 1.
lock steering to heading(Direction,90).

wait until ship:velocity:surface:mag >= 90.

//////////
//Ascent 1
//////////
Msg("Starting Turn!").
declare Pitch to 89.
declare AscVel to 100.

until Pitch <= 45{ 
 until ship:velocity:surface:mag >= AscVel{
  clearscreen.
  print "Ascent 1".
  print " Velocity: " + round(ship:velocity:surface:mag).
  print "Tvelocity: " + round(AscVel).
  print "      apo: " + round(ship:apoapsis).
  print " altitude: " + round(ship:altitude).
  print "    pitch: " + Pitch.
  wait .1.

 }

 //increment by  
 lock steering to heading(Direction,Pitch).
 set Pitch to (Pitch - 1).
 Set AscVel to (AscVel + 7).
 
}

//////////
//Ascent 2
//////////
set Pitch to (Pitch - 1).
//make this max 15000 or apo plus something.
declare AscApo to 15000.
//declare AscApo to (ship:apoapsis + 1000).

//until Pitch <= 10 or ship:apoapsis >= 60000{ 
until Pitch <= 10 and ship:apoapsis >= 60000{ 
 until ship:apoapsis >= AscApo{
  clearscreen.
  print "Ascent 2".
  print " Velocity: " + round(ship:velocity:surface:mag).
  print "      apo: " + round(ship:apoapsis).
  print "     Tapo: " + round(AscApo).
  print "      alt: " + round(ship:altitude).
  print "    pitch: " + Pitch.
  wait .1.
 }

 lock steering to heading (Direction,Pitch).
 //set Pitch to (Pitch - 1).
 set Pitch to Max(10,(Pitch - 1)).
 set AscApo to (AscApo + 1000).
 //set AscApo to (AscApo + 700).

}


/////
//ascent 3
/////
until Pitch <= 3 or ship:apoapsis >= 72000{ 
 until ship:apoapsis >= AscApo{
  clearscreen.
  print "Ascent 3".
  print " Velocity: " + round(ship:velocity:surface:mag).
  print "  apo: " + round(ship:apoapsis).
  print " Tapo: " + round(AscApo).
  print "  alt: " + round(ship:altitude).
  print "pitch: " + Pitch.
  wait .1.
 }

 lock steering to heading (Direction,Pitch).
 set Pitch to (Pitch - 1).
 set AscApo to (AscApo + 1000).

}

////////////
//Final Burn
//wait until ship:apoapsis >= TargetAlt.
until ship:apoapsis >= TargetAlt{
 clearscreen.
 print "Final Burn".
 print "apo: " + round(ship:apoapsis).
 print "tApo: " + TargetAlt.
 print " alt: " + round(ship:altitude).
 print "pitch: " + Pitch.
 wait .1.
}

/////
lock throttle to 0.
/////
lock steering to prograde.
clearscreen.
print "apo at destination, throttle off".
wait 1.
print "final apo: " + round(ship:apoapsis).
wait 1.
print "target alt: " + TargetAlt.
wait 5.


//Clear Atmo
until ship:altitude >= 71000{
 clearscreen.
 print "waiting to clear atmo".
 print "alt: " + round(ship:altitude).
 print "Talt: 71000".
 print "apo: " + round(ship:apoapsis).
 wait .1.
}

clearscreen.
print "welcome to space!".
wait 1.


//circularize
run Circularize(Direction).

//eccentricity
run eccentricity.

//ship stats

print round(ship:liquidfuel).

print "goodbye".


