//2 stage single stick and a fairing launch script.
//now with optional fairings! if > 0 then fairings!
//semi advanced roll control
//no throttle control
//semi advanced gravity turn, vel/apo based
//uses circ
//has minimum targetalt
//has to set pitch to 3

parameter Direction.
parameter TargetAlt.
parameter Fairings.

//also log wait altitudes
declare Asc1Pitch to 45.
declare Asc1Increment to 7.
declare Asc2Pitch to 10.
declare Asc2Increment to 1000.


declare LogState to 1.
declare targVal to "".


//safety alt
set TargetAlt to max(72000,TargetAlt).

///////
//Functions

function AscentInfo {
 Flog.
 print "pitch: " + round(Pitch).
 print "  Vel: " + round(ship:velocity:surface:mag).
 print targVal.
 print "  apo: " + round(ship:apoapsis).
 print "  alt: " + round(ship:altitude).

}

function Msg {
 parameter mText.
 hudtext(mText,4,2,25,green,false).
 
}

//if logstate then
function StartLog {
//log launch info
log "Asc1Pitch ,Asc1Increment ,Asc2Pitch, Asc2Increment, Target Alt, Direction"  to tstolog.txt.
log  asc1pitch + ", " + Asc1increment + ", " + asc2pitch + ", " + Asc2increment + ", " + TargetAlt + ", " +  direction to tstolog.txt.

//log headers
declare Headers to "start".
set Headers to Headers + ", " + "test".
set Headers to Headers + ", " + "more".

log Headers to tstolog.txt.

log "Pitch, Prograde, surfPrograde, Velocity, Altitude, Apoapsis, Periapsis" to tstolog.txt.
}


if LogState > 0 {
	StartLog.
}
function Flog {
 //Write stuff to log
 //Log "test" to log.txt.
 if LogState > 0 {
  declare data to Pitch + ", " + (90 - vang( ship:up:vector, ship:PROGRADE:VECTOR )) + ", "+ (90 - vang( ship:up:vector, ship:srfPROGRADE:VECTOR )) + ", " + (ship:velocity:surface:mag) + ", " + ship:altitude + ", " + ship:apoapsis + ", " + max(0,ship:periapsis).
  log data to tstolog.txt.
 }
 
//First write headers
//Then write values
//Make sure you get the values of the vars
 
}

//nav functions



///////////////////
///////////////////

///
clearscreen.
lock throttle to 1.
lock steering to heading(0,90).

//countdown
run countfrom(5).

print "Blastoff!".
Msg("blastoff!!").
stage.
wait 1.
clearscreen.

//////
//autostager
//////
when ship:maxthrust < 1 then {
 Msg("Staging!").
 wait .5.
 stage.
 wait 1.
 preserve.
}

//fairings!!!
if Fairings > 0{
 when ship:altitude >= 45000 then {
  Msg("Losing Fairings!").
  wait .5.
  stage.
 }
 
}


//NAVIGATION
declare Pitch to 90.
declare AscApo to 0.

//Roll Program
until ship:velocity:surface:mag >= 40 {
 Flog.
 Wait .1.
}
print "starting roll program".
Msg("starting roll program").
lock steering to heading((Direction / 2),Pitch).
Flog.
wait (Direction/180).
Flog.
lock steering to heading(Direction,Pitch).
Flog.
wait 1.
Flog.
lock steering to heading(Direction,Pitch).
Flog.
until ship:velocity:surface:mag >= 90{
 Flog.
 Wait .1.
}


//////////
//Ascent 1
//////////
Msg("Starting Turn!").
declare AscVel to 100.

until Pitch <= 45{ 
 until ship:velocity:surface:mag >= AscVel{
  clearscreen.
  print "Ascent 1".
  set targVal to " TVel: " + round(AscVel).
  AscentInfo.
  
  wait .1.

 }

 //increment by  
 set Pitch to (Pitch - 1).
 set AscVel to (AscVel + 7).
 lock steering to heading(Direction,Pitch).
 Flog.
 
}

//////////
//Ascent 2
//////////
//set Pitch to (Pitch - 1).
//make this max 15000 or apo plus something.
//declare AscApo to 15000.
declare AscApo to max((ship:apoapsis + Asc2increment), 15000).

//until Pitch <= 10 or ship:apoapsis >= 60000{ 
until Pitch <= Asc2Pitch and ship:apoapsis >= 72000{ 
 until ship:apoapsis >= AscApo{
  clearscreen.
  print "Ascent 2".
  set targVal to " TApo: " + round(AscApo).
  AscentInfo.
  wait .1.
  
 }

 set Pitch to max(Asc2pitch,(Pitch - 1)).
// set Pitch to max(Asc2pitch, max(((90 - vang( ship:up:vector, ship:PROGRADE:VECTOR )) -10), (Pitch - 1) )).
 set AscApo to (AscApo + Asc2increment).
 set Asc2Increment to Asc2Increment * 1.01.
 lock steering to heading (Direction,Pitch).
 Flog.

}



////////////
//Final Burn
//wait until ship:apoapsis >= TargetAlt.
until ship:apoapsis >= TargetAlt{
 until ship:apoapsis >= AscApo{
  clearscreen.
  Flog.
  print "Final Burn".
  set targVal to " TApo: " + round(AscApo).
  AscentInfo.
  wait .1.
 }
 

 set Pitch to max(1,(Pitch - 1)).
// set Pitch to max(1,(90 - vang(ship:up:vector, ship:PROGRADE:VECTOR)) -5).
 set AscApo to (AscApo + Asc2Increment).
 set Asc2Increment to Asc2Increment * 1.01.
 lock steering to heading (Direction,Pitch).
 
}

/////
//MECO
lock throttle to 0.
lock steering to prograde.

clearscreen.
print "apo at destination, throttle off".
print "final apo: " + round(ship:apoapsis).

/////
//Clear Atmo
until ship:altitude >= 71000{
 clearscreen.
 Flog.
 print "waiting to clear atmo".
 print "alt: " + round(ship:altitude).
 print "Talt: 71000".
 print "apo: " + round(ship:apoapsis).
 wait .1.
}

clearscreen.
print "welcome to space!".
wait 1.

////
//circularize
run Circularize(Direction).

////
//eccentricity
run eccentricity.

//ship stats
log "Final Fuel:" to tstolog.txt.
log round(ship:liquidfuel) to tstolog.txt.
print round(ship:liquidfuel).

//log final stats
declare timer to 0.
until timer > 5 {
 Flog.
 set timer to timer + 1.
 wait 1.

}

print "goodbye".


