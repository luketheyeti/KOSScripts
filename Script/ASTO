//3stage sideboosters and fairing
//semi-advanced roll program
//semi-advanced gravity turn, vel/apo
//no throttle control
//advanced staging logic for side boosters
//has fairings parameter, >0 to stage fairings.
//needs throttle control
//Has? minimum target alt
//Has? to set pitch to 0


parameter Direction.
parameter TargetAlt.
parameter Fairings.

Set TargetAlt to Max(85000,TargetAlt).

clearscreen.
lock throttle to 1.
lock steering to heading (0,90).


//countdown

run countfrom(5).

print "Blastoff!!".
stage.

declare maxThrust to ship:maxthrust.
//declare shipStage to 1.

when ship:maxthrust < maxThrust then {
 print "staging boosters!".
 wait 1.
 stage.
 wait 1.
 print ship:maxthrust.
 declare maxThrust to ship:maxthrust.
 print ship:maxthrust.

}

//when ship:maxthrust = 0 then{
when ship:maxthrust < 1 then {
 print "staging core!".
 wait 1.
 stage.
 wait 1.
 preserve.
}

if Fairings > 0{
 when ship:altitude >= 45000 then {
  print "losing fairings".
  stage.
  wait 1.
 }
}


wait until ship:velocity:surface:mag > 40.
print "starting roll program".
lock steering to heading((Direction / 2),90).
wait (Direction/180).
lock steering to heading(Direction,90).
wait 1.
lock steering to heading(Direction,90).

wait until ship:velocity:surface:mag >= 90.

///////////////////
//ascent 1
declare Pitch to 89.
declare AscVel to 100.

until Pitch <= 50{ 
 until ship:velocity:surface:mag >= AscVel{
  clearscreen.
  print "       Velocity: " + round(ship:velocity:surface:mag).
  print "Target Velocity: " + AscVel.
  print "       Altitude: " + round(ship:altitude).
  print "          Pitch: " + Pitch.
  wait .1.

 }

 //increment by  
 lock steering to heading(Direction,Pitch).
 set Pitch to (Pitch - 1).
 Set AscVel to (AscVel + 7).
 
}

/////////////////////////
//ascent 2
set Pitch to (Pitch - 1).
//declare AscApo to 20000.
//reactive first apo
//might turn too soon lol
//20000 is a bit of a wait tho, might be better to be 15000 or reactive. make a different gate.
declare AscApo to (ship:apoapsis + 1000).

until Pitch <= 10 or ship:apoapsis >= 60000{ 
 until ship:apoapsis >= AscApo{
  clearscreen.
  print "apo: " + round(ship:apoapsis).
  print "target apo: " + AscApo.
  print "pitch: " + Pitch.
  wait .1.
  
 }
 

 lock steering to heading (Direction,Pitch).
 set Pitch to (Pitch - 1).
 set AscApo to (AscApo + 1000).

}


print "apo: " + round(ship:apoapsis).
print "target apo: " + TargetAlt.
wait 1.

/////
//Ascent 3
/////
until Pitch <= 3 or ship:apoapsis >= 72000{ 
 until ship:apoapsis >= AscApo{
  clearscreen.
  print "apo: " + round(ship:apoapsis).
  print "target apo: " + round(AscApo).
  print "altitude: " + round(ship:altitude).
  print "pitch: " + Pitch.
  wait .1.
 }

 lock steering to heading (Direction,Pitch).
 set Pitch to (Pitch - 1).
 //if and above set Pitch to Max(0,(Pitch - 1)).
 set AscApo to (AscApo + 1000).

}

clearscreen.
print "apo in space".
wait 1.

////
//Final Burn
////
//wait until ship:apoapsis >= TargetAlt.
until ship:apoapsis >= TargetAlt{
 clearscreen.
 print "apo: " + round(ship:apoapsis).
 print "tApo: " + TargetAlt.
 wait .1.
}
lock throttle to 0.
lock steering to prograde.

clearscreen.
print "apo: " + round(ship:apoapsis).
print "tApo: " + TargetAlt.
print "apo at destination, throttle off".
wait 1.

print "final apo: " + round(ship:apoapsis).
print "target alt: " + TargetAlt.
wait 5.

//Clear Atmo
until ship:altitude >= 71000{
 clearscreen.
 print "waiting to clear atmo".
 print "alt: " + round(ship:altitude).
 print "Talt: 71000".
 wait .1.
}

//circularize

run Circularize(Direction).

//eccentricity

run eccentricity.

//separate

print round(ship:liquidfuel).

print "goodbye".


