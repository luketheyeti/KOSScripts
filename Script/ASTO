//3stage sideboosters and fairing
//semi-advanced roll program
//semi-advanced gravity turn, vel/apo
//no throttle control
//advanced staging logic for side boosters
//has fairings parameter, >0 to stage fairings.
//needs throttle control
//Has? minimum target alt
//Has? to set pitch to 0


parameter Direction.
parameter TargetAlt.
parameter Fairings.

declare Asc1Pitch to 45.
declare Asc1Inc to 7.
declare Asc2Pitch to 10.
declare Asc2Inc to 1000.

Set TargetAlt to Max(85000,TargetAlt).

///////
//Functions

function AscentInfo {
 print "pitch: " + Pitch.
 print " Vel: " + round(ship:velocity:surface:mag).
 print "Target: " + round(AscVel).
 print "Target: " + round(AscApo).
 print " apo: " + round(ship:apoapsis).
 print " alt: " + round(ship:altitude).

}

function Msg {
 parameter mText.
 hudtext(mText,4,2,25,green,false).
 
}

//log launch info
Log "Asc1Pitch ,Asc1Inc ,Asc2Pitch"  to astolog.txt.
log  asc1pitch + ", " + asc1inc + ", " + asc2pitch + ", " + asc2inc to astolog.txt.

//log headers
Log "Pitch, Prograde, surfPrograde, Velocity, Altitude, Apoapsis, Periapsis" to astolog.txt.

function Flog {
 //Write stuff to log
 //Log "test" to log.txt.
 Declare data to pitch + ", " + (90 - vang(ship:up:vector, SHIP:PROGRADE:VECTOR)) + ", "+ (90 - vang(ship:up:vector, SHIP:srfPROGRADE:VECTOR )) + ", " + (ship:velocity:surface:mag) + ", " + ship:altitude + ", " + ship:apoapsis + ", " + max(0,ship:periapsis).
 log data to astolog.txt.
//First write headers
//Then write values
//Make sure you get the values of the vars
 
}

//fairings!
if Fairings > 0{
 when ship:altitude >= 45000 then {
  print "losing fairings".
  stage.
  wait 1.
 }
}

/////////////////




//////
//Launch
//////
clearscreen.
declare Pitch to 90.
lock throttle to 1.
lock steering to heading (0,Pitch).
Flog.

//countdown
run countfrom(5).
Flog.

//Liftoff
Msg("blastoff!!").
stage.
Flog.

///
//autostagers
/// make these functions but call them here so you get proper thrust and stuff
declare maxThrust to ship:maxthrust.
when ship:maxthrust < maxThrust then {
 print "staging boosters!".
 wait 1.
 stage.
 wait 1.
 print ship:maxthrust.
 declare maxThrust to ship:maxthrust.
 print ship:maxthrust.
 Flog.
}

//when ship:maxthrust = 0 then{
when ship:maxthrust < 1 then {
 print "staging core!".
 wait 1.
 stage.
 preserve.
 Flog.
}


///////
//Navigation!!
///////

//init all vars so you don't crash
declare AscApo to 0.

//roll program
until ship:velocity:surface:mag >= 40 {
 Wait .1.
}
Flog.
Msg("starting roll program").
lock steering to heading((Direction / 2),Pitch).
wait (Direction/180).
lock steering to heading(Direction,Pitch).
wait 1.
lock steering to heading(Direction,Pitch).
until ship:velocity:surface:mag >= 90{
 Wait .1.
}
Flog.

//////////
//Ascent 1
//////////
Msg("Starting Turn!").
declare AscVel to 100.

until Pitch <= 45{ 
 until ship:velocity:surface:mag >= AscVel{
  clearscreen.
  print "Ascent 1".
  AscentInfo.
  Flog.
  wait .1.

 }

 //increment by  
 set Pitch to (Pitch - 1).
 Set AscVel to (AscVel + 7).
 lock steering to heading(Direction,Pitch).
 
}
Flog.

//////////
//Ascent 2
//////////
//set Pitch to (Pitch - 1).
//make this max 15000 or apo plus something.
//declare AscApo to 15000.

declare AscApo to max((ship:apoapsis + Asc2inc), 15000).


//until Pitch <= 10 or ship:apoapsis >= 60000{ 
until Pitch <= asc2pitch and ship:apoapsis >= 72000{ 
 until ship:apoapsis >= AscApo{
  clearscreen.
  print "Ascent 2".
  AscentInfo.
  Flog.
  wait .1.
 }

 set Pitch to max(Asc2pitch,(Pitch - 1)).
 set AscApo to (AscApo + Asc2inc).
 lock steering to heading (Direction,Pitch).


}
Flog.



////
//Final Burn
////
until Pitch <= 1 and ship:apoapsis >= TargetAlt{
 until ship:apoapsis >= AscApo{
  clearscreen.
  print "Final Burn".
  AscentInfo.
  Flog.
  wait .1.
 }
 

 //set Pitch to (Pitch - 1).
 set Pitch to max(1,(Pitch - 1)).
 set AscApo to (AscApo + 1000).
 lock steering to heading (Direction,Pitch).
 
}
Flog.

////////
//MECO
////////
lock throttle to 0.
lock steering to prograde.

clearscreen.
print "apo at destination, throttle off".
print "final apo: " + round(ship:apoapsis).
Flog.

//Clear Atmo
until ship:altitude >= 71000{
 clearscreen.
 print "waiting to clear atmo".
 print "alt: " + round(ship:altitude).
 print "Talt: 71000".
 print "apo: " + round(ship:apoapsis).
 Flog.
 wait .1.
}
Flog.

clearscreen.
print "welcome to space!".
wait 1.

//circularize
run Circularize(Direction).
Flog.

//eccentricity
//run eccentricity.
run ShipStats.
Flog.

Flog.

declare timer to 0.
until timer > 5 {
Flog.
set timer to timer + 1.

wait 1.


}

print "goodbye".


